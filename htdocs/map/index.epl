[-
	use lib qw( /var/www/lib/perl );
	use Nabovarme::Db;

	$dbh = Nabovarme::Db->my_connect || die $!;
-]
<HTML>
	<HEAD>
	<TITLE>MeterLogger Map</TITLE>
	<meta name="robots" content="noindex">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link rel="stylesheet" href="/css/menu.css">
	<script src="/js/menu.js" defer></script>

	<link rel="stylesheet" href="leaflet/leaflet.css" />
	<script src="leaflet/leaflet.js"></script>
	<style>
		#footer {
				position: fixed;
				height: 0px;	// change this to enable footer
				margin-top: 0;
				bottom: 0;
				right: 0;
				left: 0;
				background: white;
		}
		body > div.container {
			position: fixed;
			top: 0;
			bottom: 0px;	// change this to enable footer
			right: 0;
			left: 0;
			width: 100%;
			vertical-align: top;
			padding-left: 0;
			padding-right: 0;
			margin-left: 0;
			margin-right: 0;
			z-index: 500;
		}
		#map {
			height: 100%;
			width: 100%;
		}

		.leaflet-control-search .search-input {
			font-size: 16px !important;
			width: 200px !important; /* increase width as needed */
			box-sizing: border-box;
			margin: 4px 0 4px 4px; /* keep left margin so it doesn’t stick to edge */
			float: left; /* keep float for layout */
			padding: 0 20px 0 8px; /* keep padding */
		}

		.leaflet-control-search {
//			bottom: 150px !important;
			top: auto !important;
			transition: transform 0.3s ease;
		}
	</style>

	<link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.0.0/css/font-awesome.css" crossorigin="anonymous">
	
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	
	<link rel="stylesheet" href="leaflet/Leaflet.awesome-markers/dist/leaflet.awesome-markers.css">
	<script src="leaflet/Leaflet.awesome-markers/dist/leaflet.awesome-markers.js"></script>
	
	<script src="leaflet/leaflet-search/leaflet-search.min.js"></script>
	<link rel="stylesheet" href="leaflet/leaflet-search/leaflet-search.css">

	<style type="text/css">
	.top {
		position: absolute;
		top: 0;
		left: 0;
	}
	.default {
		font-family: Verdana, Geneva, sans-serif;
	}
	.default-bold {
		font-family: Verdana, Geneva, sans-serif;
		font-weight: bold;
	}
	.default-group {
		font-family: Verdana, Geneva, sans-serif;
		font-weight: bold;
		font-size: 120%;
	}
	</style>
	</HEAD>
	<BODY>

<div class="container">
		<div id="map"></div>
	<div id="footer"></div>
</div>
	
	<script>
		var map = L.map('map', {
			zoomSnap: 0,
			zoomControl: false // disable default position (top left)
		});
		
		L.control.zoom({
			position: 'topleft'
		}).addTo(map);

		// Creates a red marker with the coffee icon
		var onlineOpenMarker = L.AwesomeMarkers.icon({
			icon: 'circle',
			markerColor: 'green',
			prefix: 'fa',
			spin: false
		});
		var onlineCloseMarker = L.AwesomeMarkers.icon({
			icon: 'minus-circle',
			markerColor: 'green',
			prefix: 'fa',
			spin: false
		});
		var offlineMarker = L.AwesomeMarkers.icon({
			icon: 'exclamation-triangle',
			markerColor: 'red',
			prefix: 'fa',
			spin: false
		});
		var semiOfflineMarker = L.AwesomeMarkers.icon({
			icon: 'exclamation',
			markerColor: 'orange',
			prefix: 'fa',
			spin: false
		});

		L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
			attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
			detectRetina: true,
			maxZoom: 22,
			minZoom: 10,
			maxNativeZoom: 18
		}).addTo(map);
		
		var g_all = L.featureGroup();			// all meters
		var g_heat = L.featureGroup();			// heating meters
		var g_water = L.featureGroup();			// water meters
		var g_electricity = L.featureGroup();	// electricity meters
		var g_aggregated = L.featureGroup();	// from aggregated source
		var g_heat_supply = L.featureGroup();	// heat supply
		var g_heat_sub = L.featureGroup();		// sub meters
		
[- 
		# get all groups
		$sth = $dbh->prepare(qq[SELECT `id`, `group` FROM `meter_groups` WHERE `group` IS NOT NULL]);
		$sth->execute;
-]
		var g_meter_groups = [];
[$ if ($sth->rows) $]
	[$ while ($d = $sth->fetchrow_hashref) $]
		g_meter_groups.push({id: [+ $d->{id} +], name: "[+ $d->{group} +]", group: L.featureGroup()});
	[$ endwhile $]
[$ endif $]

[- 
		# get all meters
		$sth = $dbh->prepare(qq[SELECT `type`, `group`, `location_lat`, `location_long`, `serial`, `info`, `uptime`, `last_updated`, `ssid`, `rssi`, `valve_status`, `valve_installed`, `ap_status`, `sw_version`, `ping_response_time`, `ping_average_packet_loss`, `disconnect_count`, `flash_id`, `flash_size`,`comment` FROM `meters` WHERE `enabled` AND `location_lat` IS NOT NULL AND `location_long` IS NOT NULL]);
		$sth->execute;
-]
[$ if ($sth->rows) $]
	[$ while ($d = $sth->fetchrow_hashref) $]
		[- 
		# ugly hack here to remove padding null characters
		$d->{valve_status} =~ s/[\x00\s]+$//; $d->{valve_status} .= '';
		$d->{ssid} =~ s/[\x00\s]+$//; $d->{ssid} .= '';
		$d->{sw_version} =~ s/[\x00\s]+$//; $d->{sw_version} .= '';
		-]
				var m = L.marker([ [+ $d->{location_lat} +], [+ $d->{location_long} +] ], 
					{
						icon: [$ if ($d->{last_updated} < time() - 86400) $]offlineMarker[$ elsif ($d->{last_updated} < time() - 3600) $]semiOfflineMarker[$ else $][$ if (($d->{valve_status} =~ /close/i) && $d->{valve_installed}) $]onlineCloseMarker[$ else $]onlineOpenMarker[$ endif $][$ endif $],
						riseOnHover: true,
						name: '[+ $d->{serial} +] [+ $d->{info} +]'
					})
				[$ if ($d->{last_updated} < time() - 86400) $]
					.setZIndexOffset(1000)
				[$ elsif ($d->{last_updated} < time() - 3600) $]
					.setZIndexOffset(900)
				[$ elsif (($d->{valve_status} =~ /close/i) && $d->{valve_installed}) $]
					.setZIndexOffset(800)
				[$ endif $]
					.bindPopup('<div class="default-bold">[+ $d->{serial} +] [+ $d->{info} +]</div><div><b>Valve status: </b>[+ $d->{valve_status} +]<br><b>SSID: </b>[+ $d->{ssid} +]<br><b>RSSI: </b>[+ $d->{rssi} +]<br><b>AP status: </b>[+ $d->{ap_status} +]<br><b>Uptime: </b>[+ int($d->{uptime} / 60 / 60 / 24) +] days<br>[$ if defined $d->{ping_response_time} $]<b>Ping response time: </b>[+ $d->{ping_response_time} +]<br>[$ endif $][$ if defined $d->{ping_average_packet_loss} $]<b>Ping average packet loss: </b>[+ $d->{ping_average_packet_loss} +]<br>[$ endif $][$ if defined $d->{disconnect_count} $]<b>Disconnect count: </b>[+ $d->{disconnect_count} +]<br>[$ endif $][$ if defined $d->{flash_id} $]<b>Flash ID: </b>[+ $d->{flash_id} +]<br>[$ endif $][$ if defined $d->{flash_size} $]<b>Flash size: </b>[+ $d->{flash_size} +]<br>[$ endif $]<b>Version: </b>[+ $d->{sw_version} +]<br>[$ if (length($d->{comment} || ($d->{valve_installed} == 0))) $]<br><i>[$ if ($d->{valve_installed} == 0) $]No thermo actuator installed. [$ endif $][+ $d->{comment} +]</i><br>[$ endif $]<a href="[$ if ($d->{type} =~ /^water$/i) $]/detail_volume_acc.epl[$ else $]/detail_acc.epl[$ endif $]?serial=[+ $d->{serial} +]">Accummulated</a> | <a href="[$ if ($d->{type} =~ /^water$/i) $]/detail_volume.epl[$ else $]/detail.epl[$ endif $]?serial=[+ $d->{serial} +]">Details</a></div>'
					);
				if (L.Browser.mobile == false) {
					m.bindTooltip('<div class="default-bold">[+ $d->{serial} +] [+ $d->{info} +]</div>');
				}
				
				g_all.addLayer(m).addTo(map);
			[$ if ($d->{type} =~ /^heat$/i) $]
				g_heat.addLayer(m).addTo(map);
			[$ elsif ($d->{type} =~ /^water$/i) $]
				g_water.addLayer(m).addTo(map);
			[$ elsif ($d->{type} =~ /^electricity$/i) $]
				g_electricity.addLayer(m).addTo(map);
			[$ elsif ($d->{type} =~ /^aggregated$/i) $]
				g_aggregated.addLayer(m).addTo(map);
			[$ elsif ($d->{type} =~ /^heat_supply$/i) $]
				g_heat_supply.addLayer(m).addTo(map);
			[$ elsif ($d->{type} =~ /^heat_sub$/i) $]
				g_heat_sub.addLayer(m).addTo(map);
			[$ endif $]
				
				for (var i in g_meter_groups) {
					if (g_meter_groups[i].id == [+ $d->{group} +]) {
						g_meter_groups[i].group.addLayer(m).addTo(map);
					}
				}
				
	[$ endwhile $]
[$ endif $]
				map.fitBounds(g_heat.getBounds().extend(g_water.getBounds())
					.extend(g_electricity.getBounds())
					.extend(g_aggregated.getBounds())
					.extend(g_heat_supply.getBounds())
					.extend(g_heat_sub.getBounds()), {padding: [20, 45]}
				);
				
				//... adding data in searchLayer ...
				var controlSearch = new L.Control.Search({
					position:'bottomleft',		
					layer: g_all,
					//sourceData,
					propertyName: 'name',
					initial: false,
					zoom: 19,
					opacity: 1,
					textErr: 'Not found',
					hideMarkerOnCollapse: true,
					marker: {
						animate: true,
						icon: false,
						circle: {
							stroke: false,
							fill: true,
							fillOpacity: 0.6,
							radius: 30,
							weight: 0,
							color: '#d13b2f'
						}
					},
				});
				map.addControl(controlSearch);
				
				// Wait until controlSearch is added and DOM elements created
				setTimeout(() => {
					const searchControl = document.querySelector('.leaflet-control-search');
					if (!searchControl) return;

					// Watch for .search-tip added dynamically
					const childObserver = new MutationObserver((mutations, obs) => {
						for (const mutation of mutations) {
							for (const node of mutation.addedNodes) {
								if (node.classList && node.classList.contains('search-tip')) {
									attachDropdownObserver(node, searchControl);
									obs.disconnect();
									return;
								}
							}
						}
					});

					childObserver.observe(searchControl, { childList: true });

					// In case dropdown already exists (e.g. user triggered search early)
					const existingDropdown = searchControl.querySelector('.search-tooltip');
					if (existingDropdown) {
						attachDropdownObserver(existingDropdown, searchControl);
						childObserver.disconnect();
					}

					function attachDropdownObserver(dropdown, control) {
						const observer = new MutationObserver(() => {
							// Use offsetParent to check visibility (more reliable)
							const isVisible = dropdown.offsetParent !== null;

							if (isVisible) {
								const dropdownHeight = dropdown.offsetHeight || 100;
								control.style.transform = `translateY(-${dropdownHeight + 10}px)`;
							} else {
								control.style.transform = 'translateY(0)';
							}
						});

						observer.observe(dropdown, { attributes: true, attributeFilter: ['style'] });
					}
				}, 500);
		
				document.addEventListener('keydown', function (event) {
					// Check for Alt+F or Ctrl+F
					if ((event.altKey && event.key.toLowerCase() === 'f') ||
							(event.ctrlKey && event.key.toLowerCase() === 'f')) {

						// Stop the browser's default find-on-page
						event.preventDefault();

						// Click the search button to reveal the input
						document.querySelector('.search-button').click();

						// Wait briefly for it to appear, then focus
						setTimeout(() => {
							const input = document.querySelector('.search-input');
							if (input) {
								input.focus();
							}
						}, 150);
					}
				});
		
	</script>

	</BODY>
</HTML>

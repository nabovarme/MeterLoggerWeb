

[- 
use DBI;

use lib qw( /var/www/lib/perl );
#use lib qw( /opt/local/apache2/perl );
use Nabovarme::Db;

if ($dbh = Nabovarme::Db->my_connect) {
	my $quoted_serial = $dbh->quote($fdat{'serial'});
	$sth = $dbh->prepare(qq[SELECT `info` FROM meters WHERE `serial` like $quoted_serial]);
	$sth->execute;

	$sth2 = $dbh->prepare(qq[SELECT hours, volume FROM samples_cache WHERE serial = $quoted_serial ORDER BY `unix_time` DESC LIMIT 1]);
	$sth2->execute;
}
if ($sth->rows) {
	if ($d = $sth->fetchrow_hashref) {
		$info = $d->{info};
	}
}
-]
<HTML>
 
	<HEAD>
		<meta name="robots" content="noindex">
		<TITLE>[+ $info +] MeterLogger</TITLE>
		<script>
			function update_last_volume() {
				var xhttp = new XMLHttpRequest();
				xhttp.onreadystatechange = function() {
					if (xhttp.readyState == 4 && xhttp.status == 200) {
						document.getElementById("last_volume").innerHTML = xhttp.responseText;
					}
				};
				xhttp.open("GET", "last_volume.epl?serial=[+ $fdat{'serial'} +]", true);
				xhttp.send();
			}
		</script>
		<script src="spinner/spin.js"></script>
		<script src="dygraphs/dygraph-dev.js"></script>
		<style type="text/css">
		.dygraph-legend {
			font-family: Verdana, Geneva, sans-serif;
			text-align: left;
			background: none;
			position: fixed;
			top: 500px;
			right: 20px;
		}
		.dygraph-label {
			font-family: Verdana, Geneva, sans-serif;
			text-align: left;
			background: none;
		}
		.dygraph-axis-label {
			font-family: Verdana, Geneva, sans-serif;
		}
		.highlight {
			font-weight: bold;
		}
		.default {
			font-family: Verdana, Geneva, sans-serif;
		}
		.default-bold {
			font-family: Verdana, Geneva, sans-serif;
			font-weight: bold;
		}
		</style>
		<style>
		@media screen and (max-device-width: 480px) {
			input[type=checkbox] {
				margin-right: 1em;
				/* All browsers except webkit*/
				transform: scale(2);
				/* Webkit browsers*/
				-webkit-transform: scale(2);
			}
		}
		</style>
	</HEAD>
	<BODY>
		<span class="default-bold">[+ $info +]<br></span>
		<span class="default">
		serial [+ $fdat{'serial'} +]<br>
		<div id="last_volume">
[$ if ($sth2->rows) $]
	[$ if ($d = $sth2->fetchrow_hashref) $]
		[+ $d->{volume} +] m<sup>3</sup><br>
		[+ $d->{hours} +] hours<br>
	[$ endif $]
[$ endif $]
		</div>
		</span>
		<br>
		<div id="spinner" style="width:800px; height:400px; position:relative;"><div id="div_nabovarme" style="width:800px; height:445px; position:absolute;"></div></div>
    	
		<script>
			var opts = {
				lines: 13,				// The number of lines to draw
				length: 28,				// The length of each line
				width: 14,				// The line thickness
				radius: 42,				// The radius of the inner circle
				scale: 0.25,			// Scales overall size of the spinner
				corners: 1,				// Corner roundness (0..1)
				color: '#000',			// #rgb or #rrggbb or array of colors
				opacity: 0.25,			// Opacity of the lines
				rotate: 0,				// The rotation offset
				direction: 1,			// 1: clockwise, -1: counterclockwise
				speed: 1,				// Rounds per second
				trail: 60,				// Afterglow percentage
				fps: 20,				// Frames per second when using setTimeout() as a fallback for CSS
				zIndex: 2e9,			// The z-index (defaults to 2000000000)
				className: 'spinner',	// The CSS class to assign to the spinner
				top: '50%',				// Top position relative to parent
				left: '50%',			// Left position relative to parent
				shadow: false,			// Whether to render a shadow
				hwaccel: true,			// Whether to use hardware acceleration
				position: 'absolute'	// Element positioning
			}
			var spinner = new Spinner(opts).spin(document.getElementById("spinner"));
		</script>
    	<script type="text/javascript">
			var current_range_string = window.location.hash;
			var current_range = current_range_string.match(/#(.+?)\-(.+?)$/);

			// remove url after #
			var current_url = window.location.href;
			current_url = current_url.replace(/#.*$/, "");

			var colorSets = [
				['#a9000c', '#011091', '#d7c8dd', '#ad6933', '#00982f'],
				null
			];
			var range = [];
			if (current_range) {
				range.push(current_range[1]);
				range.push(current_range[2]);
			}
			else {
				range = [ (Date.now() - 86400000), Date.now() ];
			}
			console.log(range);
			var reload_time = Date.now();
			var g;
			var drawGraph = function(data) {
				g = new Dygraph(
					document.getElementById("div_nabovarme"), data, {
						delimiter: ',',
						colors: colorSets[0],
						strokeWidth: 1.5,
						animatedZooms: true,
						showLabelsOnHighlight: true,
						labelsDivStyles: {
							'font-family': 'Verdana, Geneva, sans-serif',
							'text-align': 'left',
							'background': 'none'
						},
						labelsSeparateLines: true,
						labelsDivWidth: 700,
						axes: {
							x: {
								valueFormatter: function(x) {
									return formatDate(new Date(x));
								}
							}
						},
						highlightSeriesOpts: {
							pointSize: 6,
							highlightCircleSize: 6,
							strokeWidth: 2,
							strokeBorderWidth: 1,
						},
						showRangeSelector: true,
						interactionModel: Dygraph.defaultInteractionModel,
						dateWindow: range,
						zoomCallback: function(minDate, maxDate, yRanges) {
							range = g.xAxisRange();
							console.log('zoomCallback: ' + range);
							window.history.replaceState("", "", current_url + "#" + range[0] + "-" + range[1]);
						},
						clickCallback: function(e, x, points) {
							range = g.xAxisRange();
							console.log('clickCallback: ' + range);
							window.history.replaceState("", "", current_url + "#" + range[0] + "-" + range[1]);
						}
					}
				);
			}
			
			var data_url_new = "data/[+ $fdat{'serial'} || '9999999' +]/new_range";
			var data_url_old = "data/[+ $fdat{'serial'} || '9999999' +]/old_range";
			var data_new = '';
			var data_old = '';

			var xhttp_old = new XMLHttpRequest();
			xhttp_old.onreadystatechange = function() {
				if (xhttp_old.readyState == 4 && xhttp_old.status == 200) {
					// stop spinner
					spinner.stop();
					
					data_old = xhttp_old.responseText;
					drawGraph(data_old + data_new);
				}
			}

			var xhttp_new = new XMLHttpRequest();
			xhttp_new.onreadystatechange = function() {
				if (xhttp_new.readyState == 4 && xhttp_new.status == 200) {
					data_new = xhttp_new.responseText;
					xhttp_old.open('GET', data_url_old, true);
					xhttp_old.send();
				}
			}
			xhttp_new.open('GET', data_url_new, true);
			xhttp_new.send();

			setInterval(function() {
				// update data and pan right
				console.log("update data and pan right");
				var xhttp_old = new XMLHttpRequest();
				xhttp_old.onreadystatechange = function() {
					if (xhttp_old.readyState == 4 && xhttp_old.status == 200) {
						data_old = xhttp_old.responseText;
						drawGraph(data_old + data_new);

						range[0] += reload_time_diff;
						range[1] += reload_time_diff;
						g.updateOptions( { dateWindow: range } );
					}
				}

				var xhttp_new = new XMLHttpRequest();
				xhttp_new.onreadystatechange = function() {
					if (xhttp_new.readyState == 4 && xhttp_new.status == 200) {
						data_new = xhttp_new.responseText;
						xhttp_old.open('GET', data_url_old, true);
						xhttp_old.send();
					}
				}
				xhttp_new.open('GET', data_url_new, true);
				xhttp_new.send();
				
				update_last_energy();
			}, 60000);
			
			function formatDate(d) {
				var year = d.getFullYear(),
				month = d.getMonth() + 1,
				date = d.getDate(),
				hours = d.getHours(),
				minutes = d.getMinutes(),
				seconds = d.getSeconds();
				
				var now = new Date();
				if (d.getTime() < now.getTime() - (1000 * 86400)) {
					return 'Time: ' + date + '.' + month + '.' + year + ' ' + 
						hours + ':' + (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
				}
				else {
					return 'Time: ' + hours + ':' + (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
				}
			}
			
			function change(el) {
				g.setVisibility(parseInt(el.id), el.checked);
			}

		</script>
		<br><br>
    	<table border="0" align="left" cellpadding="0" cellspacing="6" width="800">
			<tr>
				<td colspan="9">&nbsp;</td>
			</tr>
			<tr>
			<td colspan="8" align="left"><span class="default"><a href="./">Back</a> | <a href="detail_volume_acc.epl?serial=[+ $fdat{'serial'} +]&low=0">Accumulated</a><br><br><a href="logout">Logout</a></span></td>
			</tr>
		</table>
	</BODY>
</HTML>

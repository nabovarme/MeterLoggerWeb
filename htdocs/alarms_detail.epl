[- 
	# Load required Perl modules
	use DBI;
	use Config;
	use Time::Duration;

	# Include custom Perl library paths
	use lib qw( /var/www/lib/perl );

	# Load internal application modules
	use Nabovarme::Db;
	use Nabovarme::Admin;

	# Instantiate admin checker
	$admin = new Nabovarme::Admin;
	
	$is_admin = 0;

	# Get alarm ID from form data
	$id = $fdat{id};

	# Connect to database
	$dbh = Nabovarme::Db->my_connect;

	if ($dbh && $id) {
		# Lookup serial number tied to alarm ID
		$quoted_id = $dbh->quote($id);
		$sth = $dbh->prepare(qq[
			SELECT `serial`
			FROM alarms
			WHERE `id` = $quoted_id
		]);
		$sth->execute;

		# Check admin cookie permission for this serial
		if ($sth->rows) {
			$d = $sth->fetchrow_hashref;
			$is_admin = $admin->cookie_is_admin($req_rec, $d->{serial});
		}

		# If admin and update flag set, process form input and update alarm
		if ($is_admin && $fdat{update}) {
			$enabled = $fdat{enabled} ? 1 : 0;
			$quoted_sms_notification = $dbh->quote($fdat{sms_notification});
			$quoted_condition = $dbh->quote($fdat{condition});
			$quoted_repeat = $dbh->quote($fdat{repeat});
			$quoted_snooze = $dbh->quote($fdat{snooze} || 0);
			$quoted_default_snooze = $dbh->quote($fdat{default_snooze});
			$quoted_up_message = $dbh->quote($fdat{up_message});
			$quoted_down_message = $dbh->quote($fdat{down_message});
			$quoted_comment = $dbh->quote($fdat{comment});

			# Perform the UPDATE query
			$dbh->do(qq[
				UPDATE alarms SET 
					enabled = $enabled,
					sms_notification = $quoted_sms_notification,
					`condition` = $quoted_condition, 
					`repeat` = $quoted_repeat, 
					snooze = $quoted_snooze, 
					default_snooze = $quoted_default_snooze, 
					up_message = $quoted_up_message, 
					down_message = $quoted_down_message,
					`comment` = $quoted_comment
				WHERE `id` = $id
			]);
		}

		# Fetch updated alarm details for display
		$sth = $dbh->prepare(qq[
			SELECT alarms.*, meters.info 
			FROM alarms 
			LEFT JOIN meters ON alarms.serial = meters.serial 
			WHERE alarms.`id` = ?
		]);
		$sth->execute($id);
		$d = $sth->fetchrow_hashref;
	}
-]
[- 
	$sth_alarm_templates = $dbh->prepare(qq[
		SELECT `description`, `condition`
		FROM alarm_templates
		ORDER BY `description`
	]);
	$sth_alarm_templates->execute;

	$alarm_templates = '';
	while ($row = $sth_alarm_templates->fetchrow_hashref) {
		$label = $row->{description};
		$condition = $row->{condition};

		# Escape double quotes for safe JS output
		$label =~ s/"/\\"/g;
		$condition =~ s/"/\\"/g;

		$alarm_templates .= qq|{ label: "$label", condition: "$condition" },\n|;
	}
-]

<HTML>
<HEAD>
	<meta charset="UTF-8">
	<title>Meterlogger alarm detail - [+ $d->{info} +] [+ $d->{serial} +]</title>

	<!-- Inline CSS for form layout and visuals -->
<style>
	/* Base font styles */
	body, label, input, textarea {
		font-family: Verdana, Geneva, sans-serif;
		font-size: 90%;
	}
	
	/* Label styling */
	label {
		display: block;
		margin-top: 12px;
		font-weight: bold;
	}
	
	/* Hint text next to labels */
	.label-hint {
		font-weight: normal;
		font-size: 70%;
		color: #666;
		margin-left: 8px;
	}
	
	/* Textarea styling */
	textarea {
		width: 100%;
		min-height: 4em;
		font-family: Verdana, Geneva, sans-serif;
		font-size: 90%;
	}
	
	/* Page layout container */
	.container {
		max-width: 600px;
		margin: 1em auto;
	}
	
	/* Optional utility class for consistent font */
	.default {
		font-family: Verdana, Geneva, sans-serif;
	}
	
	/* Optional utility class for headings */
	.default-headline {
		font-family: Verdana, Geneva, sans-serif;
		font-weight: bold;
		font-size: 120%;
	}
	
	/* Alarm state highlighting box */
	.alarm-state {
		background-color: #ffdddd;
		padding: 1em;
		border-radius: 6px;
		margin-bottom: 1em;
	}
	
	/* Back link styling */
	a.back-link {
		display: inline-block;
		margin-bottom: 1em;
		text-decoration: none;
		color: #0077cc;
	}
	a.back-link:hover {
		text-decoration: underline;
	}
	
	/* Autocomplete or suggestion popup */
	#condition-popup {
		position: absolute;
		display: none;
		background: #fff;
		border: 1px solid #ccc;
		border-radius: 6px;
		box-shadow: 0 4px 12px rgba(0,0,0,0.1);
		z-index: 1000;
		font-family: Verdana, sans-serif;
		font-size: 13px;
		max-width: 320px;
	}
	
	/* Items inside the popup */
	.popup-item {
		padding: 8px 12px;
		cursor: pointer;
		border-bottom: 1px solid #eee;
	}
	.popup-item:last-child {
		border-bottom: none;
	}
	.popup-item:hover {
		background: #f5f5f5;
	}
	
	/* Bold section label inside popup */
	.popup-label {
		font-weight: bold;
	}
</style>

	<!-- Inline CSS for help text about variables that can be used in the condition field  -->
<style>
	/* Tooltip wrapper */
	.tooltip {
		position: relative;
		display: inline-block;
		cursor: help;
		max-width: 100%;
	}
	
	/* Tooltip content box */
	.tooltiptext {
		/* Visibility and display */
		visibility: hidden;
		opacity: 0;
		pointer-events: none;
		transition: opacity 0.3s;
	
		/* Size and layout */
		width: max-content;
		max-width: 350px;   /* Allows wider tooltips */
		max-height: 600px;  /* Prevent overly tall tooltip */
		overflow-y: auto;   /* Enable vertical scroll if needed */
	
		/* Style */
		background-color: #333;
		color: #fff;
		padding: 8px;
		border-radius: 6px;
		text-align: left;
		font-size: 12px;
		white-space: normal;
		word-wrap: break-word;
	
		/* Positioning */
		position: absolute;
		z-index: 100;
		bottom: 125%;
		left: 50%;
		transform: translateX(-50%);
	}
	
	/* Show tooltip on hover over .tooltip or the tooltip content */
	.tooltip:hover .tooltiptext,
	.tooltip .tooltiptext:hover {
		visibility: visible;
		opacity: 1;
		pointer-events: auto; /* Make tooltip text interactive */
	}
</style>
</HEAD>

<script>
(function() {
	const textarea = document.getElementById('conditionField');
	const popup = document.getElementById('condition-popup');

	// List of predefined options
	const options = [
		[+ $alarm_templates +]
	];

	let triggerIndex = -1;

	textarea.addEventListener('input', function(e) {
		const cursorPos = textarea.selectionStart;
		const text = textarea.value;
		const lastAt = text.lastIndexOf('@', cursorPos - 1);

		if (lastAt !== -1 && (cursorPos - lastAt <= 30)) {
			triggerIndex = lastAt;
			showPopup();
		} else {
			hidePopup();
		}
	});

	function showPopup() {
		popup.innerHTML = '';
		options.forEach(opt => {
			const div = document.createElement('div');
			div.className = 'popup-item';
			div.innerHTML = `<div class="popup-label">${opt.label}</div>`;
			div.onclick = () => {
				insertCondition(opt.condition);
				hidePopup();
			};
			popup.appendChild(div);
		});

		const rect = textarea.getBoundingClientRect();
		popup.style.left = rect.left + window.scrollX + "px";
		popup.style.top = (rect.top + textarea.offsetHeight + window.scrollY) + "px";
		popup.style.display = 'block';
	}

	function hidePopup() {
		popup.style.display = 'none';
	}

	function insertCondition(condition) {
		const text = textarea.value;
		const before = text.substring(0, triggerIndex);
		const after = text.substring(textarea.selectionEnd);
		textarea.value = before + condition + " " + after;

		const pos = (before + condition + " ").length;
		textarea.focus();
		textarea.setSelectionRange(pos, pos);
	}

	// Hide popup if clicking elsewhere
	document.addEventListener('click', (e) => {
		if (!popup.contains(e.target) && e.target !== textarea) {
			hidePopup();
		}
	});
})();
</script>
<script>
document.addEventListener('DOMContentLoaded', function () {
	const textarea = document.getElementById('conditionField');
	const popup = document.getElementById('condition-popup');

	const options = [
		[+ $alarm_templates +]
	];

	let triggerIndex = -1;

	// Create a hidden mirror div for caret position calculation
	const mirrorDiv = document.createElement('div');
	document.body.appendChild(mirrorDiv);

	// Copy textarea styles to mirror div
	const style = getComputedStyle(textarea);
	const properties = [
		'boxSizing', 'width', 'height', 'overflowX', 'overflowY',
		'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth',
		'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft',
		'fontFamily', 'fontSize', 'fontWeight', 'fontStyle', 'letterSpacing',
		'textTransform', 'wordSpacing', 'lineHeight', 'tabSize', 'MozTabSize'
	];
	properties.forEach(prop => {
		mirrorDiv.style[prop] = style[prop];
	});

	mirrorDiv.style.position = 'absolute';
	mirrorDiv.style.visibility = 'hidden';
	mirrorDiv.style.whiteSpace = 'pre-wrap';
	mirrorDiv.style.wordWrap = 'break-word';
	mirrorDiv.style.top = '0';
	mirrorDiv.style.left = '-9999px';

	textarea.addEventListener('input', onInput);
	textarea.addEventListener('scroll', onInput); // reposition on scroll

	function onInput(e) {
		const cursorPos = textarea.selectionStart;
		const text = textarea.value;
		const lastAt = text.lastIndexOf('@', cursorPos - 1);

		if (lastAt !== -1 && (cursorPos - lastAt <= 30)) {
			triggerIndex = lastAt;
			showPopupAtCaret(cursorPos);
		} else {
			hidePopup();
		}
	}

	function showPopupAtCaret(cursorPos) {
		popup.innerHTML = '';
		options.forEach(opt => {
			const div = document.createElement('div');
			div.className = 'popup-item';
			div.innerHTML = `<div class="popup-label">${opt.label}</div>`;
			div.onclick = () => {
				insertCondition(opt.condition);
				hidePopup();
			};
			popup.appendChild(div);
		});

		const caret = getCaretCoordinates(textarea, cursorPos);
		const textareaRect = textarea.getBoundingClientRect();

		// Position popup right next to caret on same line
		const left = textareaRect.left + window.scrollX + caret.left;
		const top = textareaRect.top + window.scrollY + caret.top;

		popup.style.left = left + 'px';
		popup.style.top = top + 'px';
		popup.style.display = 'block';
	}

	function hidePopup() {
		popup.style.display = 'none';
	}

	function insertCondition(condition) {
		const text = textarea.value;
		const before = text.substring(0, triggerIndex);
		const after = text.substring(textarea.selectionEnd);
		textarea.value = before + condition + " " + after;

		const pos = (before + condition + " ").length;
		textarea.focus();
		textarea.setSelectionRange(pos, pos);
	}

	// Hide popup if clicking outside
	document.addEventListener('click', (e) => {
		if (!popup.contains(e.target) && e.target !== textarea) {
			hidePopup();
		}
	});

	// Function to get caret coordinates inside textarea
	// Adapted from https://github.com/component/textarea-caret-position
	function getCaretCoordinates(element, position) {
		const div = mirrorDiv;

		// Set mirror div content up to caret
		const value = element.value.substring(0, position);

		// Replace spaces with &nbsp; to replicate rendering
		const safeValue = value.replace(/\n$/g, '\n\u200b').replace(/ /g, '\u00a0');

		div.textContent = safeValue;

		// Create a span to mark caret position
		const span = document.createElement('span');
		span.textContent = element.value.substring(position) || '.'; // use '.' if empty to get height

		div.appendChild(span);

		return {
			left: span.offsetLeft,
			top: span.offsetTop
		};
	}
});
</script>


<BODY>
<div class="container">

	<!-- Display message if no alarm record found -->
	[$ if (!$d) $]
		<p>No alarm found for serial: [+ $serial +]</p>

	[$ else $]
		<!-- Alarm form, optionally styled if alarm is active -->
		<div class="[$ if ($d->{alarm_state} && $d->{'enabled'}) $]alarm-state[$ endif $]">
			<div class="default-headline"><a href="detail.epl?serial=[+ $d->{serial} +]">[+ $d->{serial} +]</a> [+ $d->{info} +]</div>
			[$ if ($is_admin) $]<form method="POST">[$ endif $]
				<input type="hidden" name="id" value="[+ $id +]">

				<!-- Enable/disable alarm checkbox -->
				<label>
					<input type="checkbox" name="enabled" value="1" [$ if ($d->{enabled}) $]checked[$ endif $]>
					Enabled
				</label>

				<!-- Alarm target contact(s) -->
				<label>Alarm receiver</label>
				<textarea name="sms_notification">[+ $d->{sms_notification} +]</textarea>

				<!-- Alarm triggering condition -->
				<label>
					<span class="tooltip">
						Condition
						<span class="tooltiptext">
							<h2>Alarm Variables Cheat Sheet</h2>
							<div>
							  <strong>Meter Readings</strong><br>
							  <span title="Seconds since the meter last reported data">$offline</span>, 
							  <span title="Total volume usage in the past 24 hours">$volume_day</span>, 
							  <span title="Total energy usage in the past 24 hours">$energy_day</span>, 
							  <span title="Median of last 5 flow readings (liters/hour)">$flow</span>, 
							  <span title="Median of last 5 volume readings">$volume</span>, 
							  <span title="Median of last 5 energy readings">$energy</span>, 
							  <span title="Median of last 5 temperature difference readings">$temp_diff</span>, 
							  <span title="Current valve status: 'open', 'closed', etc.">$valve_status</span>, 
							  <span title="1 if the valve is installed, 0 if not">$valve_installed</span>
							</div>

							<div>
							  <strong>Alarm-Specific Data</strong><br>
							  <span title="Meter serial number">$serial</span>, 
							  <span title="Alarm ID in the system">$id</span>, 
							  <span title="Default snooze time (seconds)">$default_snooze</span>, 
							  <span title="Unique key used for snoozing the alarm">$snooze_auth_key</span>
							</div>

							<div>
							  <strong>Predefined Aliases</strong><br>
							  <span title="Alias for: $energy_day > 1 && $valve_status ne 'open' && $valve_installed">$leak</span>
							</div>

							<div>
							  <strong>Examples</strong><br>
							  <code>$leak</code> — Leak detection condition<br>
							  <code>$flow &lt; 2</code> — Low flow condition<br>
							  Message example:<br>
							  <code>Alarm triggered on $serial. Last update: $offline seconds ago.</code>
							</div>
						</span>
					</span>
					<span class="label-hint">(type '@' to show template conditions)</span>
				</label>
				<textarea name="condition" id="conditionField">[+ $d->{condition} +]</textarea>
				<div id="condition-popup"></div>

				<!-- Show last notification if any -->
				[$ if ($d->{alarm_state}) $]
				<label>Last notification</label>
				<textarea name="last_notification" readonly>[+ duration(time() - $d->{last_notification}) +] ago</textarea>
				[$ endif $]

				<!-- Repeat interval -->
				<label>Repeating</label>
				<textarea name="repeat">[+ $d->{repeat} +]</textarea>

				<!-- Show current snooze info if relevant -->
				[$ if ($d->{repeat} && $d->{snooze} && $d->{alarm_state}) $]
				<label>Snoozed</label>
				<textarea name="snooze" readonly>[+ duration($d->{snooze}) +], next in [+ duration(time() - ($d->{last_notification} + $d->{snooze})) +]</textarea>
				[$ endif $]

				<!-- Default snooze interval -->
				<label>Default snooze</label>
				<textarea name="default_snooze">[+ $d->{default_snooze} +]</textarea>

				<!-- Messages sent when alarm condition clears or triggers -->
				<label>Up Message</label>
				<textarea name="up_message">[+ $d->{up_message} +]</textarea>

				<label>Down Message</label>
				<textarea name="down_message">[+ $d->{down_message} +]</textarea>

				<!-- Additional notes -->
				<label>Comment</label>
				<textarea name="comment">[+ $d->{comment} +]</textarea>

				<!-- Submit button -->
				[$ if ($is_admin) $]
				<div style="margin-top: 20px;">
					<input type="submit" name="update" value="Update">
				</div>
				[$ endif $]
			[$ if ($is_admin) $]</form>[$ endif $]
		</div>
	[$ endif $]
	<!-- Back to overview link -->
	<div style="margin-top: 3em;" class="default">
		<a href="alarms.epl">Back</a>
		<br><br><a href="logout">Logout</a>
	</div>	
</div>
</BODY>
</HTML>

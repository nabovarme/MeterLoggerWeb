<HTML>
[- 
use DBI;
use Time::Format qw( time_format );

use lib qw( /var/www/lib/perl );
#use lib qw( /opt/local/apache2/perl );
use Nabovarme::Db;
use Nabovarme::Admin;

$admin = new Nabovarme::Admin;
$is_admin = $admin->cookie_is_admin($req_rec, $fdat{'serial'});

if ($is_admin && ($fdat{add_state} =~ /add/i)) {
	$admin->add($fdat{serial}, $fdat{unix_time}, $fdat{info}, $fdat{amount}, $fdat{price});	# $serial, $date, $info, $amount, $price
	$http_headers_out{'Location'} = "detail_acc.epl?serial=" . $fdat{serial} . "&low=1";
}

if ($dbh = Nabovarme::Db->my_connect) {
	my $quoted_serial = $dbh->quote($fdat{'serial'});
	$sth = $dbh->prepare(qq[SELECT `info` FROM meters WHERE `serial` like $quoted_serial]);
	$sth->execute;

	$sth2 = $dbh->prepare(qq[SELECT hours, volume FROM samples_cache WHERE serial LIKE $quoted_serial ORDER BY `unix_time` DESC LIMIT 1]);
	$sth2->execute;

	# get kWh left
	$sth3 = $dbh->prepare(qq[SELECT ROUND( \
	(SELECT SUM(amount/price) AS paid_m3 FROM accounts WHERE serial = $quoted_serial) - \
	(SELECT \
		(SELECT samples_cache.volume FROM samples_cache WHERE samples_cache.serial = $quoted_serial ORDER BY samples_cache.unix_time DESC LIMIT 1) - \
		(SELECT meters.setup_value FROM meters WHERE meters.serial = $quoted_serial) AS consumed_kwh \
	), 2) AS m3_left]);
	$sth3->execute;

	# get list of payments
	$sth4 = $dbh->prepare(qq[SELECT DATE_FORMAT(FROM_UNIXTIME(payment_time), "%d.%m.%Y %T") AS date_string, info, amount, price \
		FROM accounts WHERE serial = $quoted_serial ORDER BY payment_time ASC]);
	$sth4->execute;

	# get last days volume usage
	$sth5 = $dbh->prepare(qq[SELECT `volume`, `unix_time` FROM nabovarme.samples_cache \
		WHERE `serial` = $quoted_serial ORDER BY unix_time DESC LIMIT 1]);
	$sth5->execute;
	if ($sth5->rows) {
		if ($d = $sth5->fetchrow_hashref) {
			$volume_now = $d->{volume};
			$time_now = $d->{unix_time};
		}
	}
	$sth5 = $dbh->prepare(qq[SELECT `volume`, `unix_time` FROM nabovarme.samples_cache \
		WHERE `serial` = $quoted_serial \
		AND (from_unixtime(unix_time) < (FROM_UNIXTIME($d->{unix_time}) - INTERVAL 24 HOUR)) ORDER BY unix_time DESC LIMIT 1]);
	$sth5->execute;
	if ($sth5->rows) {
		if ($d = $sth5->fetchrow_hashref) {
			$volume_last = $d->{volume};
			$time_last = $d->{unix_time};
		}
	}
	if (($time_now - $time_last) > 0) {
		$volume_last_day = ($volume_now - $volume_last) / (($time_now - $time_last) / 60 / 60);
	}
}

if ($sth->rows) {
	if ($d = $sth->fetchrow_hashref) {
		$info = $d->{info};
	}
}
-] 
	<HEAD>
		<meta name="robots" content="noindex">
		<TITLE>[+ $info +] MeterLogger</TITLE>
		<script src="spinner/spin.js"></script>
		<script src="dygraphs/dygraph-dev.js"></script>
		<style type="text/css">
		.dygraph-legend {
			font-family: Verdana, Geneva, sans-serif;
			text-align: left;
			background: none;
			position: fixed;
			top: 500px;
			right: 20px;
		}
		.dygraph-label {
			font-family: Verdana, Geneva, sans-serif;
			text-align: left;
			background: none;
		}
		.dygraph-axis-label {
			font-family: Verdana, Geneva, sans-serif;
		}
		.highlight {
			font-weight: bold;
		}
		.default {
			font-family: Verdana, Geneva, sans-serif;
		}
		.default-bold {
			font-family: Verdana, Geneva, sans-serif;
			font-weight: bold;
		}
		.default-highlight {
			font-family: Verdana, Geneva, sans-serif;
			background-color:#FFFF00;
		}
		</style>
[$ if ($is_admin) $]
		<style type="text/css">
		td input {
		    width: 100%;
		    box-sizing: border-box;
		}
		</style>
<!--		<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"> -->
<!--		<script src="https://code.jquery.com/jquery-1.12.4.js"></script> -->
<!--		<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script> -->
<!--		<script>
			$( function() {
				$( "#datepicker" ).datepicker();
			} );
		</script> -->
[$ endif $]
		</HEAD>
	<BODY>
		<span class="default-bold">[+ $info +]<br></span>
		<span class="default">
		serial [+ $fdat{'serial'} +]<br>
		<div id="last_volume">
[$ if ($sth2->rows) $]
	[$ if ($d = $sth2->fetchrow_hashref) $]
		[+ $d->{volume} +] m<sup>3</sup><br>
		[+ $d->{hours} +] hours<br>
	[$ endif $]
[$ endif $]
		</div>
		</span>
		<div id="spinner" style="width:800px; height:400px; position:relative;"><div id="div_nabovarme" style="width:800px; height:400px; position:absolute;"></div></div>
		<script>
			var opts = {
				lines: 13,				// The number of lines to draw
				length: 28,				// The length of each line
				width: 14,				// The line thickness
				radius: 42,				// The radius of the inner circle
				scale: 0.25,			// Scales overall size of the spinner
				corners: 1,				// Corner roundness (0..1)
				color: '#000',			// #rgb or #rrggbb or array of colors
				opacity: 0.25,			// Opacity of the lines
				rotate: 0,				// The rotation offset
				direction: 1,			// 1: clockwise, -1: counterclockwise
				speed: 1,				// Rounds per second
				trail: 60,				// Afterglow percentage
				fps: 20,				// Frames per second when using setTimeout() as a fallback for CSS
				zIndex: 2e9,			// The z-index (defaults to 2000000000)
				className: 'spinner',	// The CSS class to assign to the spinner
				top: '50%',				// Top position relative to parent
				left: '50%',			// Left position relative to parent
				shadow: false,			// Whether to render a shadow
				hwaccel: true,			// Whether to use hardware acceleration
				position: 'absolute'	// Element positioning
			}
			var spinner = new Spinner(opts).spin(document.getElementById("spinner"));
		</script>
		<script>
			function update_last_volume() {
				var xhttp = new XMLHttpRequest();
				xhttp.onreadystatechange = function() {
					if (xhttp.readyState == 4 && xhttp.status == 200) {
						document.getElementById("last_volume").innerHTML = xhttp.responseText;
					}
				};
				xhttp.open("GET", "last_volume.epl?serial=[+ $fdat{'serial'} +]", true);
				xhttp.send();
			}

			function update_m3_left() {
				var xhttp = new XMLHttpRequest();
				xhttp.onreadystatechange = function() {
					if (xhttp.readyState == 4 && xhttp.status == 200) {
						document.getElementById("m3_left").innerHTML = xhttp.responseText;
					}
				};
				xhttp.open("GET", "m3_left.epl?serial=[+ $fdat{'serial'} +]", true);
				xhttp.send();
			}
		</script>
    	<script type="text/javascript">
			var data = [];
			var colorSets = [
				['#999999'],
				null
			]
			data = "data/[+ $fdat{'serial'} || '9999999' +]/volume_acc";
			g = new Dygraph(
				document.getElementById("div_nabovarme"), data, {
					colors: colorSets[0],
					strokeWidth: 1.5,
					animatedZooms: true,
					showLabelsOnHighlight: true,
					labelsDivStyles: {
						'font-family': 'Verdana, Geneva, sans-serif',
						'text-align': 'left',
						'background': 'none'
					},
					labelsSeparateLines: true,
					labelsDivWidth: 700,
					axes: {
						x: {
							valueFormatter: function(x) {
								return formatDate(new Date(x));
							}
						}
					},
					maxNumberWidth: 12,
					highlightSeriesOpts: {
						pointSize: 6,
						highlightCircleSize: 6,
						strokeWidth: 2,
						strokeBorderWidth: 1,
					}
					//showRangeSelector: true, does not work with zoom
				}
			);
			setInterval(function() {
				var range = g.xAxisRange();
				// update data and pan right
				range[0] += 60000;
				range[1] += 60000;
				g.updateOptions( { 'file': data, dateWindow: range } );
				update_last_volume();
				update_m3_left();
			}, 60000);
			
			function formatDate(d) {
				var year = d.getFullYear(),
				month = d.getMonth() + 1,
				date = d.getDate(),
				hours = d.getHours(),
				minutes = d.getMinutes(),
				seconds = d.getSeconds();
				
				var now = new Date();
				if (d.getTime() < now.getTime() - (1000 * 86400)) {
					return 'Time: ' + date + '.' + month + '.' + year + ' ' + 
						hours + ':' + (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
				}
				else {
					return 'Time: ' + hours + ':' + (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
				}
		    }

			g.ready(function () {
				// stop spinner
				spinner.stop();
			});
		</script>
		<br>
	    	<table border="0" align="left" cellpadding="0" cellspacing="6" width="800">
			  <tr align="left" valign="bottom">
			    <td align="left"><span class="default-bold">Date</span></td>
				<td>&nbsp;</td>
			    <td align="left"><span class="default-bold">Info</span></td>
				<td>&nbsp;</td>
			    <td align="right"><span class="default-bold">Amount</span></td>
				<td>&nbsp;</td>
			    <td align="left"><span class="default-bold">Price</span></td>
	    	  </tr>
		
	  		[$ if ($sth4->rows) $]
			[$ while ($d = $sth4->fetchrow_hashref) $]
			  <tr align="left" valign="bottom">
				<td align="left"><span class="default">[+ $d->{date_string} +]</span></td>
				<td>&nbsp;</td>
				<td align="left"><span class="default">[+ sprintf("%.0f", ($d->{amount} / $d->{price})) . " kWh" +] [+ $d->{info} +] </span></td>
				<td>&nbsp;</td>
				<td align="right"><span class="default">[+ $d->{amount} || "0" +] kr</span></td>
				<td>&nbsp;</td>
				<td align="left"><span class="default">[+ $d->{price} || "0" +]  kr/kWh</span></td>
  			  </tr>
			[$ endwhile $]
			[$ endif $]
			[$ if ($is_admin) $]
				[$ if ($fdat{add_state} =~ /preview/i) $]
			  <form method="GET" action="">
			  <tr align="left" valign="bottom">
				<td><span class="default-highlight">[+ time_format('dd.mm.yyyy hh:mm:ss', time()) +]</span></td>
				<td>&nbsp;</td>
				<td><span class="default-highlight">[+ sprintf("%.0f", ($fdat{amount} / $fdat{price})) . " kWh" +] [+ $fdat{info} +]</span></td>
				<td>&nbsp;</td>
				<td align="right"><span class="default-highlight">[+ $fdat{amount} +] kr</span></td>
				<td>&nbsp;</td>
				<td><span class="default-highlight">[+ $fdat{price} +] kr/kWh</span></td>
			  </tr>
			  <tr align="left" valign="bottom">
				<td>&nbsp;</td>
				<td>&nbsp;</td>
				<td>
					<input type="hidden" name="serial" value="[+ $fdat{serial} +]">
					<input type="hidden" name="low" value="[+ $fdat{low} +]">
					<input type="hidden" name="unix_time" value="[+ time() +]">
					<input type="hidden" name="info" value="[+ $fdat{info} +]">
					<input type="hidden" name="amount" value="[+ $fdat{amount} +]">
					<input type="hidden" name="price" value="[+ $fdat{price} +]">
					<input type="hidden" name="add_state" value="add">
					<input type="submit" name="add" value="Add" style="width: 100px;">
				</td>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
			  </tr>
			  </form>
				[$ else $]
			  <form method="GET" action="">
			  <tr align="left" valign="bottom">
				<td><!-- <span class="default"><input type="text" inputmode="text" name="date" value="" size="12"></span> --></td>
				<td>&nbsp;</td>
				<td><span class="default"><input type="text" inputmode="text" name="info" value="" size="22"></span></td>
				<td>&nbsp;</td>
				<td align="right"><span class="default"><input type="text" inputmode="text" name="amount" value="" size="5"></span></td>
				<td>&nbsp;</td>
				<td><span class="default"><input type="text" inputmode="text" name="price" value="[+ sprintf(qq[%.2f], $admin->default_price_for_serial($fdat{serial})) +]" size="3"></span>
			  </td>
			  </tr>
			  <tr align="left" valign="bottom">
				<td>&nbsp;</td>
				<td>&nbsp;</td>
				<td>
					<input type="hidden" name="serial" value="[+ $fdat{serial} +]">
					<input type="hidden" name="low" value="[+ $fdat{low} +]">
					<input type="hidden" name="add_state" value="preview">
					<input type="submit" name="add" value="Preview" style="width: 100px;">
				</td>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
			  </tr>
			  </form>
				[$ endif $]
			[$ endif $]
			  <tr align="left" valign="bottom">
				<td>&nbsp;</td>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
			  </tr>
	  		[$ if ($sth3->rows) $]
	  			[$ if ($d = $sth3->fetchrow_hashref) $]
				[-	use utf8;
					if ($volume_last_day > 0) {
						$volume_time_left = $d->{m3_left} / $volume_last_day;
						if ($volume_time_left > 24) {
							if (sprintf("%.0f", $volume_time_left / 24) == 1) {
								$volume_time_left_str = sprintf("%.0f", $volume_time_left / 24) . " day";
							}
							else {
								$volume_time_left_str = sprintf("%.0f", $volume_time_left / 24) . " days";
							}
						}
						else {
							if (sprintf("%.0f", $volume_time_left) == 1) {
								$volume_time_left_str = sprintf("%.0f", $volume_time_left) . " hour";
							}
							else {
								$volume_time_left_str = sprintf("%.0f", $volume_time_left) . " hours";
							}
						}
					}
					else {
						$volume_time_left_str = '∞';
					}
				-]
  			  <tr align="left" valign="bottom">
  				<td>&nbsp;</td>
  				<td>&nbsp;</td>
  				<td align="left"><span class="default-bold"><div id="m3_left">[+ sprintf("%.2f", $d->{m3_left}) || "0" +] m<sup>3</sup> left, [+ $volume_time_left_str || "0" +] at [+ sprintf("%.0f", $volume_last_day * 1000) +] l/h</div></span></td>
  				<td>&nbsp;</td>
  				<td>&nbsp;</td>
  				<td>&nbsp;</td>
  				<td>&nbsp;</td>
  			  </tr>
	  			[$ endif $]
	  		[$ endif $]
			<tr>
				<td colspan="8">&nbsp;</td>
			</tr>
			<tr>
				<td colspan="8" align="left"><span class="default"><a href="./">Back</a> | <a href="detail_volume.epl?serial=[+ $fdat{'serial'} +]&low=0">Details</a><br><br><a href="logout">Logout</a></span></td>
			</tr>
		    </table>
		
		<br>
		<br>
	</BODY>
</HTML>

[- 
use lib qw( /var/www/lib/perl );
use Nabovarme::Db;
use Nabovarme::Utils;

if ($dbh = Nabovarme::Db->my_connect) {
	$quoted_serial = $dbh->quote($fdat{'serial'});

	$sth = $dbh->prepare(qq[
		SELECT
			m.serial,
		
			-- Calculate remaining kilowatt-hours:
			-- paid_kwh - consumed energy + any setup (initial) value
			ROUND(
				IFNULL(paid_kwh_table.paid_kwh, 0) - IFNULL(latest_sc.energy, 0) + m.setup_value,
				2
			) AS kwh_left,
		
			-- Estimate time left in hours:
			-- kwh_left / current power usage (effect), if effect > 0
			ROUND(
				IF(latest_sc.effect > 0,
					(IFNULL(paid_kwh_table.paid_kwh, 0) - IFNULL(latest_sc.energy, 0) + m.setup_value) / latest_sc.effect,
					NULL
				),
				2
			) AS time_left_hours,
		
			-- Energy used in the last 24 hours:
			-- difference between latest and previous day's energy readings
			ROUND(
				latest_sc.energy - prev_sc.energy,
				2
			) AS energy_last_day
		
		FROM meters m
		
		-- Join the latest available sample for each serial
		LEFT JOIN (
			SELECT sc1.*
			FROM samples_cache sc1
			INNER JOIN (
				-- Get the most recent timestamp per serial
				SELECT serial, MAX(unix_time) AS max_time
				FROM samples_cache
				GROUP BY serial
			) latest ON sc1.serial = latest.serial AND sc1.unix_time = latest.max_time
		) latest_sc ON m.serial = latest_sc.serial
		
		-- Join the latest sample from ~24 hours ago for each serial
		LEFT JOIN (
			SELECT sc2.*
			FROM samples_cache sc2
			INNER JOIN (
				-- Get the latest sample *before* 24 hours ago per serial
				SELECT serial, MAX(unix_time) AS max_time
				FROM samples_cache
				WHERE unix_time <= UNIX_TIMESTAMP(NOW()) - 86400  -- 86400 seconds = 24 hours
				GROUP BY serial
			) prev ON sc2.serial = prev.serial AND sc2.unix_time = prev.max_time
		) prev_sc ON m.serial = prev_sc.serial
		
		-- Join total energy purchased (converted from money to kWh) per serial
		LEFT JOIN (
			SELECT serial, SUM(amount / price) AS paid_kwh
			FROM accounts
			GROUP BY serial
		) paid_kwh_table ON m.serial = paid_kwh_table.serial
		
		-- Filter only heat-related meter types, and target a specific serial
		WHERE m.type IN ('heat', 'heat_supply', 'heat_sub')
		  AND m.serial = $quoted_serial;
	]);
	$sth->execute;

	if ($sth->rows) {
		if ($d = $sth->fetchrow_hashref) {
			$kwh_left = $d->{kwh_left};
			$time_left_hours = $d->{time_left_hours};
			$energy_last_day = $d->{energy_last_day};
		}
	}
}

if ($energy_last_day > 0) {
	$time_left_str = rounded_duration($time_left_hours * 3600);
}
else {
	$time_left_str = '∞'; 
}

-]
[+ sprintf("%.0f", $kwh_left) +] kWh left, [+ $time_left_str || "0" +] at [+ sprintf("%.2f", $energy_last_day / 24) +] kW/h
